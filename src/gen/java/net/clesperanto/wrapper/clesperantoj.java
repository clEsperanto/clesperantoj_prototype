// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package net.clesperanto.wrapper;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

public class clesperantoj extends net.clesperanto.presets.clesperantoj {
    static { Loader.load(); }

@Name("std::vector<std::string>") public static class StringVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringVector(Pointer p) { super(p); }
    public StringVector(String value) { this(1); put(0, value); }
    public StringVector(String ... array) { this(array.length); put(array); }
    public StringVector(BytePointer value) { this(1); put(0, value); }
    public StringVector(BytePointer ... array) { this(array.length); put(array); }
    public StringVector()       { allocate();  }
    public StringVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator =") @ByRef StringVector put(@ByRef StringVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @StdString String get(@Cast("size_t") long i);
    public native StringVector put(@Cast("size_t") long i, String value);
    @ValueSetter @Index(function = "at") public native StringVector put(@Cast("size_t") long i, @StdString BytePointer value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @StdString String value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator ++") @ByRef Iterator increment();
        public native @Name("operator ==") boolean equals(@ByRef Iterator it);
        public native @Name("operator *") @StdString String get();
    }

    public String[] get() {
        String[] array = new String[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public String pop_back() {
        long size = size();
        String value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public StringVector push_back(String value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public StringVector put(String value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public StringVector put(String ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }

    public StringVector push_back(BytePointer value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public StringVector put(BytePointer value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public StringVector put(BytePointer ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

// Parsed from clesperantoj.hpp

// #ifndef __INCLUDE_CLESPERANTOJ_HPP
// #define __INCLUDE_CLESPERANTOJ_HPP

// #include <memory>
// #include <string>
// #include <vector>

// #include "array.hpp"
// #include "backend.hpp"
// #include "device.hpp"
// #include "utils.hpp"

public static class BackendJ extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BackendJ() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BackendJ(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BackendJ(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BackendJ position(long position) {
        return (BackendJ)super.position(position);
    }
    @Override public BackendJ getPointer(long i) {
        return new BackendJ((Pointer)this).offsetAddress(i);
    }

    public static native void setBackend(@StdString String backendName);
    public static native void setBackend(@StdString BytePointer backendName);
}

public static class DeviceJ extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeviceJ(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DeviceJ(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DeviceJ position(long position) {
        return (DeviceJ)super.position(position);
    }
    @Override public DeviceJ getPointer(long i) {
        return new DeviceJ((Pointer)this).offsetAddress(i);
    }

    public DeviceJ() { super((Pointer)null); allocate(); }
    private native void allocate();

    public static native @ByVal StringVector getAvailableDevices(@StdString String deviceType/*="all"*/);
    public static native @ByVal StringVector getAvailableDevices();
    public static native @ByVal StringVector getAvailableDevices(@StdString BytePointer deviceType/*="all"*/);

    public native void setDevice(@StdString String deviceName/*=""*/, @StdString String deviceType/*="all"*/);
    public native void setDevice();
    public native void setDevice(@StdString BytePointer deviceName/*=""*/, @StdString BytePointer deviceType/*="all"*/);
    public native @StdString String getName();
    public native @StdString String getInfo();
}
public static class ArrayJ extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ArrayJ(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ArrayJ(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ArrayJ position(long position) {
        return (ArrayJ)super.position(position);
    }
    @Override public ArrayJ getPointer(long i) {
        return new ArrayJ((Pointer)this).offsetAddress(i);
    }

    public ArrayJ() { super((Pointer)null); allocate(); }
    private native void allocate();

    public native @Cast("size_t") long getWidth();
    public native @Cast("size_t") long getHeight();
    public native @Cast("size_t") long getDepth();
    public native @Cast("unsigned int") int getDimension();

    public native @StdString String getDataType();
    public native @StdString String getMemoryType();
    public native @StdString String getDevice();

    public native void fillMemory(float value);
    public native void copyDataTo(@ByRef ArrayJ dst);
}

public static class MemoryJ extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MemoryJ() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MemoryJ(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MemoryJ(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MemoryJ position(long position) {
        return (MemoryJ)super.position(position);
    }
    @Override public MemoryJ getPointer(long i) {
        return new MemoryJ((Pointer)this).offsetAddress(i);
    }

    public static native @ByVal ArrayJ makeFloatBuffer(@Const @ByRef DeviceJ device, @Cast("const size_t") long width, @Cast("const size_t") long height, @Cast("const size_t") long depth, @Cast("const size_t") long dimension, @StdString String memory_type);
    public static native @ByVal ArrayJ makeFloatBuffer(@Const @ByRef DeviceJ device, @Cast("const size_t") long width, @Cast("const size_t") long height, @Cast("const size_t") long depth, @Cast("const size_t") long dimension, @StdString BytePointer memory_type);
    public static native @ByVal ArrayJ makeIntBuffer(@Const @ByRef DeviceJ device, @Cast("const size_t") long width, @Cast("const size_t") long height, @Cast("const size_t") long depth, @Cast("const size_t") long dimension, @StdString String memory_type);
    public static native @ByVal ArrayJ makeIntBuffer(@Const @ByRef DeviceJ device, @Cast("const size_t") long width, @Cast("const size_t") long height, @Cast("const size_t") long depth, @Cast("const size_t") long dimension, @StdString BytePointer memory_type);

    public static native void writeFloatBuffer(@Const @ByRef ArrayJ array, FloatPointer data, @Cast("const size_t") long size);
    public static native void writeFloatBuffer(@Const @ByRef ArrayJ array, FloatBuffer data, @Cast("const size_t") long size);
    public static native void writeFloatBuffer(@Const @ByRef ArrayJ array, float[] data, @Cast("const size_t") long size);
    public static native void writeIntBuffer(@Const @ByRef ArrayJ array, IntPointer data, @Cast("const size_t") long size);
    public static native void writeIntBuffer(@Const @ByRef ArrayJ array, IntBuffer data, @Cast("const size_t") long size);
    public static native void writeIntBuffer(@Const @ByRef ArrayJ array, int[] data, @Cast("const size_t") long size);

    public static native void readFloatBuffer(@Const @ByRef ArrayJ array, FloatPointer data, @Cast("const size_t") long size);
    public static native void readFloatBuffer(@Const @ByRef ArrayJ array, FloatBuffer data, @Cast("const size_t") long size);
    public static native void readFloatBuffer(@Const @ByRef ArrayJ array, float[] data, @Cast("const size_t") long size);
    public static native void readIntBuffer(@Const @ByRef ArrayJ array, IntPointer data, @Cast("const size_t") long size);
    public static native void readIntBuffer(@Const @ByRef ArrayJ array, IntBuffer data, @Cast("const size_t") long size);
    public static native void readIntBuffer(@Const @ByRef ArrayJ array, int[] data, @Cast("const size_t") long size);
}

// #endif // __INCLUDE_CLESPERANTOJ_HPP


}
