/*-
 * #%L
 * Java wrapper for Clesperanto
 * %%
 * Copyright (C) 2022 - 2025 Robert Haase, MPI CBG and Stephane Rigaud, Institut Pasteur
 * %%
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the PoL, TU Dresden nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/**
 * This file is autogenerated. Do not edit manually.
 */    
package net.clesperanto.kernels;

import java.util.Objects;
import java.util.ArrayList;
import java.util.HashMap;

import net.clesperanto.core.ArrayJ;
import net.clesperanto.core.DeviceJ;
import net.clesperanto.core.Utils;

/**
 * Class containing all functions of tier 6 category
 */
public class Tier6 {

	/**
	 * Dilates labels to a larger size.
	 * No label overwrites another label.
	 * Similar to the implementation in scikitimage [2] and MorpholibJ[3] Notes * This operation assumes input images are isotropic.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input ({@link ArrayJ}) - Input label image to erode
	 * @param output ({@link ArrayJ}) - Output label image (default: None)
	 * @param radius (int) -  (default: 2)
	 * @return {@link ArrayJ}
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ dilateLabels(DeviceJ device, ArrayJ input, ArrayJ output, int radius) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input, "input cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.dilate_labels(device.getRaw(), input.getRaw(), output == null ? null : output.getRaw(), radius));
    }
    
	/**
	 * Erodes labels to a smaller size.
	 * Note: Depending on the label image and the radius, labels may disappear and labels may split into multiple islands.
	 * Thus, overlapping labels of input and output may not have the same identifier.
	 * Notes * This operation assumes input images are isotropic.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input ({@link ArrayJ}) - Input label image
	 * @param output ({@link ArrayJ}) - Output label image (default: None)
	 * @param radius (int) -  (default: 1)
	 * @param relabel (boolean) - Relabel the image, e.g. if object disappear or split. (default: False)
	 * @return {@link ArrayJ}
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ erodeLabels(DeviceJ device, ArrayJ input, ArrayJ output, int radius, boolean relabel) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input, "input cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.erode_labels(device.getRaw(), input.getRaw(), output == null ? null : output.getRaw(), radius, relabel));
    }
    
	/**
	 * Labels objects directly from grey-value images.
	 * The outline_sigma parameter allows tuning the segmentation result.
	 * Under the hood,  this filter applies a Gaussian blur, Otsu-thresholding [1] and connected component labeling [2].
	 * The  thresholded binary image is flooded using the Voronoi tesselation approach starting from the found local maxima.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input0 ({@link ArrayJ}) - Intensity image to segment
	 * @param output ({@link ArrayJ}) - Output label image. (default: None)
	 * @param outline_sigma (float) - Gaussian blur sigma along all axes (default: 0)
	 * @return {@link ArrayJ}
	 * @see <a href="https://ieeexplore.ieee.org/document/4310076">4310076</a>
	 * @see <a href="https://en.wikipedia.org/wiki/Connected-component_labeling">Connected-component_labeling</a>
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ gaussOtsuLabeling(DeviceJ device, ArrayJ input0, ArrayJ output, float outline_sigma) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input0, "input0 cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.gauss_otsu_labeling(device.getRaw(), input0.getRaw(), output == null ? null : output.getRaw(), outline_sigma));
    }
    
	/**
	 * Takes a binary image, labels connected components and dilates the regions using a octagon shape until they touch.
	 * The region growing is limited to a masked area.
	 * The resulting label map is written to the output.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input ({@link ArrayJ}) - Input binary image
	 * @param mask ({@link ArrayJ}) - Input
	 * @param output ({@link ArrayJ}) - Output label image (default: None)
	 * @return {@link ArrayJ}
	 * @see <a href="https://clij.github.io/clij2-docs/reference_maskedVoronoiLabeling">reference_maskedVoronoiLabeling</a>
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ maskedVoronoiLabeling(DeviceJ device, ArrayJ input, ArrayJ mask, ArrayJ output) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input, "input cannot be null");
		Objects.requireNonNull(mask, "mask cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.masked_voronoi_labeling(device.getRaw(), input.getRaw(), mask.getRaw(), output == null ? null : output.getRaw()));
    }
    
	/**
	 * Takes a binary image, labels connected components and dilates the regions using a octagon shape until they touch.
	 * The resulting label map is written to the output.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input_binary ({@link ArrayJ}) - Input binary image
	 * @param output_labels ({@link ArrayJ}) - Output label image (default: None)
	 * @return {@link ArrayJ}
	 * @see <a href="https://clij.github.io/clij2-docs/reference_voronoiLabeling">reference_voronoiLabeling</a>
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ voronoiLabeling(DeviceJ device, ArrayJ input_binary, ArrayJ output_labels) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input_binary, "input_binary cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.voronoi_labeling(device.getRaw(), input_binary.getRaw(), output_labels == null ? null : output_labels.getRaw()));
    }
    
	/**
	 * Removes labelled objects small than a given size (in pixels) from a label map.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input ({@link ArrayJ}) - Label image to filter.
	 * @param output ({@link ArrayJ}) - Output label image filtered. (default: None)
	 * @param minimum_size (float) - Smallest size object allowed. (default: 100)
	 * @return {@link ArrayJ}
	 * @see <a href="https://clij.github.io/clij2-docs/reference_excludeLabelsOutsideSizeRange">reference_excludeLabelsOutsideSizeRange</a>
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ removeSmallLabels(DeviceJ device, ArrayJ input, ArrayJ output, float minimum_size) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input, "input cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.remove_small_labels(device.getRaw(), input.getRaw(), output == null ? null : output.getRaw(), minimum_size));
    }
    
	/**
	 * Removes labels from a label map which are below a given maximum size.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input ({@link ArrayJ}) - Label image to filter.
	 * @param output ({@link ArrayJ}) - Output label image filtered. (default: None)
	 * @param maximum_size (float) - Largest size object to exclude. (default: 100)
	 * @return {@link ArrayJ}
	 * @see <a href="https://clij.github.io/clij2-docs/reference_excludeLabelsOutsideSizeRange">reference_excludeLabelsOutsideSizeRange</a>
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ excludeSmallLabels(DeviceJ device, ArrayJ input, ArrayJ output, float maximum_size) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input, "input cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.exclude_small_labels(device.getRaw(), input.getRaw(), output == null ? null : output.getRaw(), maximum_size));
    }
    
	/**
	 * Removes labeled objects bigger than a given size (in pixels) from a label map.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input ({@link ArrayJ}) - Label image to filter.
	 * @param output ({@link ArrayJ}) - Output label image filtered. (default: None)
	 * @param maximum_size (float) - Biggest size object allowed. (default: 100)
	 * @return {@link ArrayJ}
	 * @see <a href="https://clij.github.io/clij2-docs/reference_excludeLabelsOutsideSizeRange">reference_excludeLabelsOutsideSizeRange</a>
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ removeLargeLabels(DeviceJ device, ArrayJ input, ArrayJ output, float maximum_size) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input, "input cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.remove_large_labels(device.getRaw(), input.getRaw(), output == null ? null : output.getRaw(), maximum_size));
    }
    
	/**
	 * Removes labels from a label map which are higher a given minimum size.
	 * @param device ({@link DeviceJ}) - Device to perform the operation on.
	 * @param input ({@link ArrayJ}) - Label image to filter.
	 * @param output ({@link ArrayJ}) - Output label image filtered. (default: None)
	 * @param minimum_size (float) - Smallest size object to keep. (default: 100)
	 * @return {@link ArrayJ}
	 * @see <a href="https://clij.github.io/clij2-docs/reference_excludeLabelsOutsideSizeRange">reference_excludeLabelsOutsideSizeRange</a>
	 * @throws NullPointerException if any of the device or input parameters are null.
	 */
    public static ArrayJ excludeLargeLabels(DeviceJ device, ArrayJ input, ArrayJ output, float minimum_size) {
        Objects.requireNonNull(device, "device cannot be null");
		Objects.requireNonNull(input, "input cannot be null");
        return new ArrayJ(net.clesperanto._internals.kernelj.Tier6.exclude_large_labels(device.getRaw(), input.getRaw(), output == null ? null : output.getRaw(), minimum_size));
    }
    
}
